
import java.awt.Font;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Owner
 */
public class HardwareStoreGUI extends javax.swing.JFrame {

    private String fileName;
    private Inventory[] list;
    static final int SIZE = 15;

    /**
     * Creates new form HardwareStoreGUI
     */
    public HardwareStoreGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        resultArea = new javax.swing.JTextArea();
        selectButton = new javax.swing.JButton();
        readButton = new javax.swing.JButton();
        outputButton = new javax.swing.JButton();
        highestButton = new javax.swing.JButton();
        totalButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        lowButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        resultArea.setColumns(20);
        resultArea.setRows(5);
        jScrollPane1.setViewportView(resultArea);

        selectButton.setText("Select Data File");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        readButton.setText("Read Data File");
        readButton.setEnabled(false);
        readButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readButtonActionPerformed(evt);
            }
        });

        outputButton.setText("Output Inventory");
        outputButton.setEnabled(false);
        outputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputButtonActionPerformed(evt);
            }
        });

        highestButton.setText("Highest");
        highestButton.setEnabled(false);
        highestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highestButtonActionPerformed(evt);
            }
        });

        totalButton.setText("Total In-Stock Value");
        totalButton.setEnabled(false);
        totalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalButtonActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.setEnabled(false);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        lowButton.setText("Low Stock");
        lowButton.setEnabled(false);
        lowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.setEnabled(false);
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(selectButton, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                            .addComponent(readButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(outputButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(highestButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(totalButton)
                            .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lowButton, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                            .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(totalButton)
                        .addComponent(lowButton)
                        .addComponent(outputButton))
                    .addComponent(selectButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(readButton)
                    .addComponent(highestButton)
                    .addComponent(searchButton)
                    .addComponent(clearButton))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        // TODO add your handling code here:
        //create a JFileChooser object
        JFileChooser openChooser = new JFileChooser("./"); //current folder

        int status = openChooser.showOpenDialog(null);

        if (status == JFileChooser.APPROVE_OPTION) { //open button
            fileName = openChooser.getSelectedFile().getAbsolutePath();

            resultArea.append(fileName + " is selected.");
        }
        
        readButton.setEnabled(true);
    }//GEN-LAST:event_selectButtonActionPerformed

    private void readButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readButtonActionPerformed
        // TODO add your handling code here:
        list = new Inventory[SIZE];
        //read data file
        try {
            Scanner inFile = new Scanner(new FileReader(fileName));

            //remove the data file heading
            for (int i = 0; i < 4; i++) {
                inFile.next();
            }

            //read data
            int count = 0;
            while (inFile.hasNext()) {
                int id = inFile.nextInt();
                String name = inFile.next();
                int numberInStock = inFile.nextInt();
                double unitPrice = inFile.nextDouble();

                //create an object and place it into the array
                list[count] = new Inventory(id, name, numberInStock, unitPrice);

                count++;
            }//end while

            resultArea.append("\nThe array is populated.\n");
            
            
            outputButton.setEnabled(true);
            highestButton.setEnabled(true);
            lowButton.setEnabled(true);
            searchButton.setEnabled(true);
            clearButton.setEnabled(true);
            totalButton.setEnabled(true);
            selectButton.setEnabled(false);
            
            

        }//end try
        catch (IOException e) {

        }
    }//GEN-LAST:event_readButtonActionPerformed

    private void outputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputButtonActionPerformed
        // TODO add your handling code here:
        resultArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
        
        resultArea.append("\n\n");
        
        for (int i = 0; i < list.length; i++) {
            resultArea.append(list[i].toString() + "\n");
        }
    }//GEN-LAST:event_outputButtonActionPerformed

    private void highestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highestButtonActionPerformed
        // TODO add your handling code here:
        int maxIndex = 0;

        for (int i = 1; i < list.length; i++) {
            if (list[maxIndex].calculateInStockValue() < list[i].calculateInStockValue()) {
                maxIndex = i;
            }
        }

        resultArea.append("\nThe item with the highest In-Stock value: \n\n" + list[maxIndex]);
    }//GEN-LAST:event_highestButtonActionPerformed

    private void totalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalButtonActionPerformed
        // TODO add your handling code here:
        double sum = 0.0;

        for (int i = 0; i < list.length; i++) {
            sum += list[i].calculateInStockValue();
        }
        resultArea.append(String.format("%n%nTotal In-Stock Value: $ %.2f %n", sum));
    }//GEN-LAST:event_totalButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        String name = JOptionPane.showInputDialog("Enter an item to search: ");

        int foundIndex = -1;
        for (int i = 0; i < list.length; i++) {
            if (list[i].getName().equalsIgnoreCase(name)) {
                foundIndex = i;
                break;
            }
        }
        if (foundIndex == -1) {
            resultArea.append("\n\n" + name + " is not found.");
        } else {
            resultArea.append("\n\n" + list[foundIndex]);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void lowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowButtonActionPerformed
        // TODO add your handling code here:
        //find items with less than 10 pieces in stock
                    for(int i=1; i<list.length; i++) {
                        if(list[i].getNumberInStock() < 10) {
                            resultArea.append("\nItems with less than 10 pieces In-Stock:\n" + list[i]);
                        }
                    }
    }//GEN-LAST:event_lowButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        resultArea.setText("");
        
        readButton.setEnabled(false);
        highestButton.setEnabled(false);
        lowButton.setEnabled(false);
        outputButton.setEnabled(false);
        totalButton.setEnabled(false);
        clearButton.setEnabled(false);
        searchButton.setEnabled(false);
        selectButton.setEnabled(true);
        
    }//GEN-LAST:event_clearButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HardwareStoreGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HardwareStoreGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HardwareStoreGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HardwareStoreGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HardwareStoreGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JButton highestButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton lowButton;
    private javax.swing.JButton outputButton;
    private javax.swing.JButton readButton;
    private javax.swing.JTextArea resultArea;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton selectButton;
    private javax.swing.JButton totalButton;
    // End of variables declaration//GEN-END:variables
}
